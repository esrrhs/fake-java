package template

include "string.fk"
include "xml.fk"

struct _tcp_client
	is_open
	recvbuffer
	sendbuffer
end

struct _tcp_server
	is_open
	svuserdata
end

struct _tcp_link
	recvbuffer
	sendbuffer
end

const node_header = 112
const node_begin = 1.1214124
const node_end = "123124"
const node_normal = 3125125215235u
const node_comment = true
const c_table_data = {
		"a" : 1
		0.2 : "c"
		3 : [1 2 3]
		"f" : {
			1 : 1
			2 : 2
			3 : 3
		}
	}
const c_array_data = [1 {1 : "aa"} 3]

func parse(name)
	
	var ret = node()
	ret->name = ""
	ret->param = map()
	ret->memlist = array()
	
	var ok, var f = file.open(name, "rb")
	if not ok then
		return false, ret
	end
	
	var content = file.read_all(f)
	ok, var pos, var errormsg = _parse(content, 0, ret)
	
	if not ok then
		return false, ret, errormsg
	end
	
	var memlist = ret->memlist
	ret = memlist[0]
	
	return true, ret, errormsg
	
end

-- 解析一段内容，取出
func _parse(content, pos, ret)

	while not _is_end(content, pos) then

		var ok, var type, var newpos, var name, var mem, var errormsg = _get_element(content, pos, ret)
		if not ok then
			return false, newpos, errormsg
		end
		
		switch type
		
			case node_header then
			
				pos = newpos
		
			case node_begin then
			
				-- 解析子节点
				var son = node()
				son->name = name
				son->param = map()
				son->memlist = array()
	
				ok, newpos, errormsg = _parse(content, newpos, son)
				if not ok then
					return false, newpos, errormsg
				end
				
				-- 解析节点属性
				ok, errormsg = _get_member(mem, son->param)
				if not ok then
					return false, newpos, errormsg
				end
				
				var memlist = ret->memlist
				memlist[size(memlist)] = son
			
				pos = newpos
			
			case node_end then
				
				return true, newpos, "ok"

			case node_normal then
						
				-- 解析子节点属性
				var son = node()
				son->name = name
				son->param = map()
				son->memlist = array()
			
				ok, errormsg = _get_member(mem, son->param)
				if not ok then
					return false, newpos, errormsg
				end
				
				var memlist = ret->memlist
				memlist[size(memlist)] = son
			
				pos = newpos
			
			case node_comment then
				
				pos = newpos
				
			default
			
				return false, newpos, "type default"
				
		end

	end
	
	return true, pos, "ok"
	
end

-- 解析一个节点
func _get_element(content, pos, ret)

	var ok = false
	var type = 0
	var newpos = 0
	var name = ""
	var mem = ""

	ok, var node_begin_pos = string.find(content, pos, "<")
	if not ok then
		return false, type, newpos, name, mem, "no <"
	end
	
	ok, var node_end_pos = string.find(content, node_begin_pos, ">")
	if not ok then
		return false, type, newpos, name, mem, "no >"
	end
	
	newpos = node_end_pos + 1
	
	var node_begin_str = string.substr(content, node_begin_pos + 1, 1)
	var node_end_str = string.substr(content, node_end_pos - 1, 1)
	
	if node_begin_str == "/" and node_end_str != "/" then
		type = node_end
	end
	if node_begin_str != "/" and node_end_str == "/" then
		type = node_normal
	end
	if node_begin_str == "/" and node_end_str == "/" then
		return false, type, newpos, name, mem, "/ error"
	end
	if node_begin_str == "!" and node_end_str == "-" then
		type = node_comment
		return true, type, newpos, name, mem, "ok"
	end
	if node_begin_str == "?" and node_end_str == "?" then
		type = node_header
		return true, type, newpos, name, mem, "ok"
	end
	if node_begin_str != "/" and node_end_str != "/" then
		type = node_begin
	end
	
	ok, var node_name_end_pos = string.find(content, node_begin_pos, " ")
	if not ok then

		name = string.substr(content, node_begin_pos + 1, node_end_pos - node_begin_pos - 1)
		
		mem = ""
						
	else
	
		if node_name_end_pos > node_begin_pos and node_name_end_pos < node_end_pos then
			
			name = string.substr(content, node_begin_pos + 1, node_name_end_pos - node_begin_pos)
			
			mem = string.substr(content, node_name_end_pos + 1, node_end_pos - node_name_end_pos - 1)

		else
		
			name = string.substr(content, node_begin_pos + 1, node_end_pos - node_begin_pos - 1)
			
			mem = ""
			
		end
		
	end

	name = string.replace(name, " ", "")
	name = string.replace(name, "\n", "")
	name = string.replace(name, "\r", "")
	name = string.replace(name, "\t", "")
	name = string.replace(name, "/", "")
		
	return true, type, newpos, name, mem, "ok"
	
end

-- 解析节点属性
func _get_member(mem, ret)

	while not _is_end(mem, 0) then
	
		var ok, var name_begin_pos = string.find(mem, 0, "=")
		if not ok then
			return false, "no ="
		end
		
		ok, var value_begin_pos = string.find(mem, name_begin_pos + 1, "\"")
		if not ok then
			return false, "no left"
		end
		
		ok, var value_end_pos = string.find(mem, value_begin_pos + 1, "\"")
		if not ok then
			return false, "no right"
		end
		
		var name = string.substr(mem, 0, name_begin_pos)
		var value = string.substr(mem, value_begin_pos + 1, value_end_pos - value_begin_pos - 1)
	
		name = string.trim(name, " ")
		
		mem = string.substr(mem, value_end_pos + 1, -1)
		mem = string.trim(mem, " ")
		mem = string.trim(mem, "/")
		
		ret[name] = value
		
	end
	
	return true, "ok"

end

-- 走完
func _is_end(content, pos)
	
	var c = string.substr(content, pos, -1)
	c = string.replace(c, " ", "")
	c = string.replace(c, "\n", "")
	c = string.replace(c, "\r", "")
	c = string.replace(c, "\t", "")
	
	if size(c) == 0 then
		return true
	else
		return false
	end

end
