
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package fakescript;

import java_cup.runtime.*;
import fakescript.syntree.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class cup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public cup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public cup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public cup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\006\000\002\002\004\000\002\061" +
    "\002\000\002\061\004\000\002\061\004\000\002\063\002" +
    "\000\002\063\003\000\002\063\004\000\002\062\004\000" +
    "\002\047\002\000\002\047\003\000\002\047\004\000\002" +
    "\050\006\000\002\046\004\000\002\046\003\000\002\064" +
    "\002\000\002\064\003\000\002\064\004\000\002\065\006" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\005\000\002\022\005\000\002\056\002\000\002\056" +
    "\003\000\002\056\004\000\002\057\005\000\002\060\002" +
    "\000\002\060\003\000\002\060\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\014\002\uffff\061\uffff\062\006\063\uffff\066" +
    "\uffff\001\002\000\004\002\061\001\002\000\012\002\ufffc" +
    "\061\ufffc\063\012\066\ufffc\001\002\000\006\020\007\064" +
    "\010\001\002\000\012\002\ufffe\061\ufffe\063\ufffe\066\ufffe" +
    "\001\002\000\012\002\ufffd\061\ufffd\063\ufffd\066\ufffd\001" +
    "\002\000\012\002\ufff8\061\ufff8\063\012\066\017\001\002" +
    "\000\004\017\014\001\002\000\012\002\ufffb\061\ufffb\063" +
    "\ufffb\066\ufffb\001\002\000\012\002\ufff9\061\ufff9\063\ufff9" +
    "\066\ufff9\001\002\000\010\002\ufff7\061\ufff7\066\ufff7\001" +
    "\002\000\010\002\ufff2\061\030\066\017\001\002\000\004" +
    "\020\021\001\002\000\012\002\ufffa\061\ufffa\063\ufffa\066" +
    "\ufffa\001\002\000\004\020\022\001\002\000\006\016\ufff3" +
    "\020\ufff3\001\002\000\006\016\025\020\024\001\002\000" +
    "\006\016\ufff4\020\ufff4\001\002\000\010\002\ufff5\061\ufff5" +
    "\066\ufff5\001\002\000\006\002\001\061\030\001\002\000" +
    "\010\002\ufff6\061\ufff6\066\ufff6\001\002\000\004\020\032" +
    "\001\002\000\006\002\ufff1\061\ufff1\001\002\000\004\031" +
    "\033\001\002\000\022\011\034\012\044\017\040\021\036" +
    "\044\043\056\041\057\037\103\035\001\002\000\034\002" +
    "\uffee\011\uffee\012\uffee\017\uffee\021\uffee\044\uffee\052\uffee" +
    "\056\uffee\057\uffee\060\uffee\061\uffee\103\uffee\104\uffee\001" +
    "\002\000\024\011\034\012\044\017\040\021\036\044\043" +
    "\056\041\057\037\103\035\104\uffe6\001\002\000\034\002" +
    "\uffec\011\uffec\012\uffec\017\uffec\021\uffec\044\uffec\052\uffec" +
    "\056\uffec\057\uffec\060\uffec\061\uffec\103\uffec\104\uffec\001" +
    "\002\000\024\011\034\012\044\017\040\021\036\044\043" +
    "\056\041\057\037\060\uffe2\103\035\001\002\000\034\002" +
    "\uffea\011\uffea\012\uffea\017\uffea\021\uffea\044\uffea\052\uffea" +
    "\056\uffea\057\uffea\060\uffea\061\uffea\103\uffea\104\uffea\001" +
    "\002\000\034\002\uffeb\011\uffeb\012\uffeb\017\uffeb\021\uffeb" +
    "\044\uffeb\052\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\103" +
    "\uffeb\104\uffeb\001\002\000\006\002\uffef\061\uffef\001\002" +
    "\000\034\002\uffe9\011\uffe9\012\uffe9\017\uffe9\021\uffe9\044" +
    "\uffe9\052\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\103\uffe9" +
    "\104\uffe9\001\002\000\034\002\uffed\011\uffed\012\uffed\017" +
    "\uffed\021\uffed\044\uffed\052\uffed\056\uffed\057\uffed\060\uffed" +
    "\061\uffed\103\uffed\104\uffed\001\002\000\024\011\034\012" +
    "\044\017\040\021\036\044\043\056\041\057\037\060\047" +
    "\103\035\001\002\000\024\011\uffe1\012\uffe1\017\uffe1\021" +
    "\uffe1\044\uffe1\056\uffe1\057\uffe1\060\uffe1\103\uffe1\001\002" +
    "\000\034\002\uffe7\011\uffe7\012\uffe7\017\uffe7\021\uffe7\044" +
    "\uffe7\052\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\103\uffe7" +
    "\104\uffe7\001\002\000\024\011\uffe0\012\uffe0\017\uffe0\021" +
    "\uffe0\044\uffe0\056\uffe0\057\uffe0\060\uffe0\103\uffe0\001\002" +
    "\000\024\011\uffe5\012\uffe5\017\uffe5\021\uffe5\044\uffe5\056" +
    "\uffe5\057\uffe5\103\uffe5\104\uffe5\001\002\000\024\011\034" +
    "\012\044\017\040\021\036\044\043\056\041\057\037\103" +
    "\035\104\057\001\002\000\004\052\054\001\002\000\022" +
    "\011\034\012\044\017\040\021\036\044\043\056\041\057" +
    "\037\103\035\001\002\000\024\011\uffe3\012\uffe3\017\uffe3" +
    "\021\uffe3\044\uffe3\056\uffe3\057\uffe3\103\uffe3\104\uffe3\001" +
    "\002\000\024\011\uffe4\012\uffe4\017\uffe4\021\uffe4\044\uffe4" +
    "\056\uffe4\057\uffe4\103\uffe4\104\uffe4\001\002\000\034\002" +
    "\uffe8\011\uffe8\012\uffe8\017\uffe8\021\uffe8\044\uffe8\052\uffe8" +
    "\056\uffe8\057\uffe8\060\uffe8\061\uffe8\103\uffe8\104\uffe8\001" +
    "\002\000\006\002\ufff0\061\ufff0\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\006\002\003\061\004\001\001\000\002\001" +
    "\001\000\006\062\012\063\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\047\015\050" +
    "\014\062\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\050\026\064" +
    "\025\065\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\065\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\041\001\001\000\002" +
    "\001\001\000\010\022\052\056\051\057\050\001\001\000" +
    "\002\001\001\000\006\022\045\060\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\052\057\055\001\001\000\002\001\001" +
    "\000\004\022\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$cup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$cup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$cup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private mycup m_mycup;
  public void set_mycup(mycup mc)
  {
	m_mycup = mc;
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$cup$actions {
  private final cup parser;

  /** Constructor */
  CUP$cup$actions(cup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$cup$do_action_part00000000(
    int                        CUP$cup$act_num,
    java_cup.runtime.lr_parser CUP$cup$parser,
    java.util.Stack            CUP$cup$stack,
    int                        CUP$cup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$cup$result;

      /* select the action based on the action number */
      switch (CUP$cup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= package_head include_head struct_head const_head 
            {
              Object RESULT =null;

              CUP$cup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-3)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		RESULT = start_val;
              CUP$cup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$cup$parser.done_parsing();
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // package_head ::= 
            {
              Object RESULT =null;
		
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("package_head",47, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // package_head ::= PACKAGE IDENTIFIER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log("[CUP]: PACKAGE IDENTIFIER " + e);
		m_mycup.set_package(e.toString());
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("package_head",47, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // package_head ::= PACKAGE IDENTIFIER_DOT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log("[CUP]: PACKAGE IDENTIFIER_DOT " + e);
		m_mycup.set_package(e.toString());
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("package_head",47, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // include_head ::= 
            {
              Object RESULT =null;
		
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("include_head",49, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // include_head ::= include_define 
            {
              Object RESULT =null;

              CUP$cup$result = parser.getSymbolFactory().newSymbol("include_head",49, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // include_head ::= include_head include_define 
            {
              Object RESULT =null;

              CUP$cup$result = parser.getSymbolFactory().newSymbol("include_head",49, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // include_define ::= INCLUDE STRING_DEFINITION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log("[CUP]: INCLUDE STRING_DEFINITION " + e);
		m_mycup.add_include(e.toString());
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("include_define",48, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // struct_head ::= 
            {
              Object RESULT =null;
		
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("struct_head",37, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // struct_head ::= struct_define 
            {
              Object RESULT =null;

              CUP$cup$result = parser.getSymbolFactory().newSymbol("struct_head",37, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // struct_head ::= struct_head struct_define 
            {
              Object RESULT =null;

              CUP$cup$result = parser.getSymbolFactory().newSymbol("struct_head",37, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // struct_define ::= STRUCT IDENTIFIER struct_mem_declaration END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		
		types.log("[CUP]: STRUCT IDENTIFIER struct_mem_declaration END ");
		m_mycup.add_struct_desc(e.toString());
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("struct_define",38, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-3)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // struct_mem_declaration ::= struct_mem_declaration IDENTIFIER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log("[CUP]: struct_mem_declaration IDENTIFIER ");
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("struct_mem_declaration",36, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // struct_mem_declaration ::= IDENTIFIER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log("[CUP]: IDENTIFIER ");
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("struct_mem_declaration",36, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // const_head ::= 
            {
              Object RESULT =null;
		
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("const_head",50, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // const_head ::= const_define 
            {
              Object RESULT =null;

              CUP$cup$result = parser.getSymbolFactory().newSymbol("const_head",50, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // const_head ::= const_head const_define 
            {
              Object RESULT =null;

              CUP$cup$result = parser.getSymbolFactory().newSymbol("const_head",50, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // const_define ::= FCONST IDENTIFIER ASSIGN explicit_value 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log("[CUP]: FCONST IDENTIFIER ASSIGN explicit_value ");
		m_mycup.add_const_desc(e.toString(), (syntree_node)e1);
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("const_define",51, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-3)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // explicit_value ::= FTRUE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log("[CUP]: FTRUE ");
		explicit_value_node p = new explicit_value_node();
		p.m_type = explicit_value_type.EVT_TRUE;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("explicit_value",16, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // explicit_value ::= FFALSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log("[CUP]: FFALSE ");
		explicit_value_node p = new explicit_value_node();
		p.m_type = explicit_value_type.EVT_FALSE;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("explicit_value",16, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // explicit_value ::= NUMBER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log("[CUP]: NUMBER ");
		explicit_value_node p = new explicit_value_node();
		p.m_str = e.toString();
		p.m_type = explicit_value_type.EVT_NUM;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("explicit_value",16, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // explicit_value ::= FKUUID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log("[CUP]: FKUUID ");
		explicit_value_node p = new explicit_value_node();
		p.m_str = e.toString();
		p.m_type = explicit_value_type.EVT_UUID;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("explicit_value",16, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // explicit_value ::= STRING_DEFINITION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log("[CUP]: STRING_DEFINITION ");
		explicit_value_node p = new explicit_value_node();
		p.m_str = e.toString();
		p.m_type = explicit_value_type.EVT_STR;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("explicit_value",16, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // explicit_value ::= FKFLOAT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log("[CUP]: FKFLOAT ");
		explicit_value_node p = new explicit_value_node();
		p.m_str = e.toString();
		p.m_type = explicit_value_type.EVT_FLOAT;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("explicit_value",16, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // explicit_value ::= OPEN_BIG_BRACKET const_map_list_value CLOSE_BIG_BRACKET 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		
		types.log("[CUP]: OPEN_BIG_BRACKET const_map_list_value CLOSE_BIG_BRACKET ");
		explicit_value_node p = new explicit_value_node();
		p.m_type = explicit_value_type.EVT_MAP;
		p.m_v = (const_map_list_value_node)e;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("explicit_value",16, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // explicit_value ::= OPEN_SQUARE_BRACKET const_array_list_value CLOSE_SQUARE_BRACKET 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		
		types.log("[CUP]: OPEN_BIG_BRACKET const_array_list_value CLOSE_BIG_BRACKET ");
		explicit_value_node p = new explicit_value_node();
		p.m_type = explicit_value_type.EVT_ARRAY;
		p.m_v = (const_array_list_value_node)e;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("explicit_value",16, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // const_map_list_value ::= 
            {
              Object RESULT =null;
		
		types.log("[CUP]: empty ");
		const_map_list_value_node p = new const_map_list_value_node();
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("const_map_list_value",44, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // const_map_list_value ::= const_map_value 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log("[CUP]: const_map_value ");
		const_map_list_value_node p = new const_map_list_value_node();
		p.add_ele((const_map_value_node)e);
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("const_map_list_value",44, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // const_map_list_value ::= const_map_list_value const_map_value 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log("[CUP]: const_map_list_value const_map_value ");
		const_map_list_value_node p = (const_map_list_value_node)e;
		p.add_ele((const_map_value_node)e1);
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("const_map_list_value",44, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // const_map_value ::= explicit_value COLON explicit_value 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log("[CUP]: explicit_value COLON explicit_value ");
		const_map_value_node p = new const_map_value_node();
		p.m_k = (syntree_node)e;
		p.m_v = (syntree_node)e1;
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("const_map_value",45, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-2)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // const_array_list_value ::= 
            {
              Object RESULT =null;
		
		types.log("[CUP]: empty ");
		const_array_list_value_node p = new const_array_list_value_node();
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("const_array_list_value",46, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // const_array_list_value ::= explicit_value 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log("[CUP]: explicit_value ");
		const_array_list_value_node p = new const_array_list_value_node();
		p.add_ele((explicit_value_node)e);
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("const_array_list_value",46, ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // const_array_list_value ::= const_array_list_value explicit_value 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.elementAt(CUP$cup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$cup$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$cup$stack.peek()).value;
		
		types.log("[CUP]: const_array_list_value explicit_value ");
		const_array_list_value_node p = (const_array_list_value_node)e;
		p.add_ele((explicit_value_node)e1);
		RESULT = p;
	
              CUP$cup$result = parser.getSymbolFactory().newSymbol("const_array_list_value",46, ((java_cup.runtime.Symbol)CUP$cup$stack.elementAt(CUP$cup$top-1)), ((java_cup.runtime.Symbol)CUP$cup$stack.peek()), RESULT);
            }
          return CUP$cup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$cup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$cup$do_action(
    int                        CUP$cup$act_num,
    java_cup.runtime.lr_parser CUP$cup$parser,
    java.util.Stack            CUP$cup$stack,
    int                        CUP$cup$top)
    throws java.lang.Exception
    {
              return CUP$cup$do_action_part00000000(
                               CUP$cup$act_num,
                               CUP$cup$parser,
                               CUP$cup$stack,
                               CUP$cup$top);
    }
}

}
