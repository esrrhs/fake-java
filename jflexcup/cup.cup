package fakescript;

import java_cup.runtime.*;
import fakescript.syntree.*;

parser code {:
  private mycup m_mycup;
  public void set_mycup(mycup mc)
  {
	m_mycup = mc;
  }
  
  public <T> T new_node(Class<? extends syntree_node> c) throws Exception
  {
	syntree_node t = c.newInstance();
	t.m_lno = m_mycup.get_jflex().get_line();
	return (T)t;
  }

:};

/* Terminals (tokens returned by the scanner). */
terminal VAR_BEGIN;
terminal RETURN;
terminal BREAK;
terminal FUNC;
terminal WHILE;
terminal FTRUE;
terminal FFALSE;
terminal IF;
terminal THEN;
terminal ELSE;
terminal END;
terminal STRING_DEFINITION;
terminal IDENTIFIER;
terminal NUMBER;
terminal SINGLE_LINE_COMMENT;
terminal DIVIDE_MOD;
terminal ARG_SPLITTER;
terminal PLUS;
terminal MINUS;
terminal DIVIDE;
terminal MULTIPLY;
terminal ASSIGN;
terminal MORE;
terminal LESS;
terminal MORE_OR_EQUAL;
terminal LESS_OR_EQUAL;
terminal EQUAL;
terminal NOT_EQUAL;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal AND;
terminal OR;
terminal FKFLOAT;
terminal PLUS_ASSIGN, MINUS_ASSIGN, DIVIDE_ASSIGN, MULTIPLY_ASSIGN, DIVIDE_MOD_ASSIGN;
terminal COLON;
terminal FOR;
terminal INC;
terminal FAKE;
terminal FKUUID;
terminal OPEN_SQUARE_BRACKET;
terminal CLOSE_SQUARE_BRACKET;
terminal FCONST;
terminal PACKAGE;
terminal INCLUDE;
terminal IDENTIFIER_DOT;
terminal IDENTIFIER_POINTER;
terminal STRUCT;
terminal IS, NOT, CONTINUE;
terminal YIELD, SLEEP;
terminal SWITCH, CASE, DEFAULT;
terminal NEW_ASSIGN;
terminal ELSEIF;
terminal RIGHT_POINTER;
terminal STRING_CAT;
terminal OPEN_BIG_BRACKET;
terminal CLOSE_BIG_BRACKET;

/* Non-terminals */
non terminal program;
non terminal break, continue;
non terminal function_declaration;
non terminal block;
non terminal stmt;
non terminal while_stmt;
non terminal else_stmt;
non terminal elseif_stmt;
non terminal elseif_stmt_list;
non terminal if_stmt;
non terminal cmp;
non terminal body;
non terminal return_stmt;
non terminal return_value;
non terminal return_value_list;
non terminal explicit_value;
non terminal variable;
non terminal arg_expr;
non terminal expr;
non terminal math_expr;
non terminal function_call;
non terminal var;
non terminal arg;
non terminal function_call_arguments;
non terminal function_declaration_arguments;
non terminal assign_stmt;
non terminal cmp_value;
non terminal assign_value;
non terminal expr_value;
non terminal math_assign_stmt;
non terminal for_stmt;
non terminal for_loop_stmt;
non terminal multi_assign_stmt;
non terminal var_list;
non terminal fake_call_stmt;
non terminal struct_mem_declaration, struct_head, struct_define;
non terminal sleep;
non terminal yield;
non terminal switch_stmt;
non terminal switch_case_define;
non terminal switch_case_list;
non terminal const_map_list_value;
non terminal const_map_value;
non terminal const_array_list_value;
non terminal package_head, include_define, include_head;
non terminal const_head, const_define;

/* Precedences */
precedence left PLUS, MINUS;
precedence left DIVIDE, MULTIPLY, DIVIDE_MOD;
precedence left STRING_CAT;

/* Top level rules */
program ::= package_head
	include_head
	struct_head
	const_head
	body
	;
	
body ::=
	/* empty */
	{:
	:}
	|
	function_declaration
	|
	body function_declaration
	;

function_declaration ::=
	FUNC IDENTIFIER:e OPEN_BRACKET function_declaration_arguments:e1 CLOSE_BRACKET block:e2 END
	{:
		types.log("[CUP]: FUNC IDENTIFIER OPEN_BRACKET function_declaration_arguments CLOSE_BRACKET block END");
		func_desc_node p = new_node(func_desc_node.class);
		p.m_funcname = e.toString();
		p.m_arglist = (func_desc_arglist_node)e1;
		p.m_block = (block_node)e2;
		p.m_endline = m_mycup.get_jflex().get_line();
		m_mycup.add_func_desc(p);
	:}
	|
	FUNC IDENTIFIER:e OPEN_BRACKET function_declaration_arguments:e1 CLOSE_BRACKET END
	{:
		types.log("[CUP]: FUNC IDENTIFIER OPEN_BRACKET function_declaration_arguments CLOSE_BRACKET END");
		func_desc_node p = new_node(func_desc_node.class);
		p.m_funcname = e.toString();
		p.m_arglist = (func_desc_arglist_node)e1;
		p.m_endline = m_mycup.get_jflex().get_line();
		m_mycup.add_func_desc(p);
	:}
	;

function_declaration_arguments ::=
	/* empty */
	{:
		types.log("[CUP]: empty");
	:}
	| 
	function_declaration_arguments:e ARG_SPLITTER arg:e1 
	{:
		types.log("[CUP]: function_declaration_arguments ARG_SPLITTER arg ");
		func_desc_arglist_node p = (func_desc_arglist_node)e;
		p.add_arg((syntree_node)e1);
		RESULT = p;
	:}
	| 
	arg:e
	{:
		types.log("[CUP]: arg");
		func_desc_arglist_node p = new_node(func_desc_arglist_node.class);
		p.add_arg((syntree_node)e);
		RESULT = p;
	:}
	;

arg ::=
	IDENTIFIER:e
	{:
		types.log("[CUP]: IDENTIFIER");
		identifier_node p = new_node(identifier_node.class);
		p.m_str = e.toString();
		RESULT = p;
	:}
	;
	
	
function_call ::=
	IDENTIFIER:e OPEN_BRACKET function_call_arguments:e1 CLOSE_BRACKET 
	{:
		types.log("[CUP]: IDENTIFIER OPEN_BRACKET function_call_arguments CLOSE_BRACKET ");
		function_call_node p = new_node(function_call_node.class);
		p.m_fuc = e.toString();
		p.m_arglist = (function_call_arglist_node)e1;
		p.m_fakecall = false;
		p.m_classmem_call = false;
		RESULT = p;
	:} 
	|
	IDENTIFIER_DOT:e OPEN_BRACKET function_call_arguments:e1 CLOSE_BRACKET 
	{:
		types.log("[CUP]: IDENTIFIER_DOT OPEN_BRACKET function_call_arguments CLOSE_BRACKET ");
		function_call_node p = new_node(function_call_node.class);
		p.m_fuc = e.toString();
		p.m_arglist = (function_call_arglist_node)e1;
		p.m_fakecall = false;
		p.m_classmem_call = false;
		RESULT = p;
	:} 
	|
	variable:e COLON IDENTIFIER:e1 OPEN_BRACKET function_call_arguments:e2 CLOSE_BRACKET 
	{:
		types.log("[CUP]: variable COLON IDENTIFIER OPEN_BRACKET function_call_arguments CLOSE_BRACKET ");
		function_call_node p = new_node(function_call_node.class);
		p.m_fuc = e1.toString();
		p.m_arglist = (function_call_arglist_node)e2;
		if (p.m_arglist == null)
		{
			p.m_arglist = new_node(function_call_arglist_node.class);
		}
		p.m_arglist.add_arg((syntree_node)e);
		p.m_fakecall = false;
		p.m_classmem_call = true;
		RESULT = p;
	:} 
	;
	
function_call_arguments ::=
	/* empty */
	{:
		types.log("[CUP]: empty ");
	:}
	| 
	function_call_arguments:e ARG_SPLITTER arg_expr:e1
	{:
		types.log("[CUP]: function_call_arguments ARG_SPLITTER arg_expr ");
		function_call_arglist_node p = (function_call_arglist_node)e;
		p.add_arg((syntree_node)e1);
		RESULT = p;
	:}
	| 
	arg_expr:e
	{:
		types.log("[CUP]: arg_expr ");
		function_call_arglist_node p = new_node(function_call_arglist_node.class);
		p.add_arg((syntree_node)e);
		RESULT = p;
	:}
	;  

arg_expr ::=
	expr_value:e
	{:
		types.log("[CUP]: expr_value");
		RESULT = e;
	:}
	;

/* function declaration end */

block ::=
	block:e stmt:e1
	{:
		types.log("[CUP]: block stmt ");
		block_node p = (block_node)e;
		p.add_stmt((syntree_node)e1);
		RESULT = p;
	:}
	|
	stmt:e
	{:
		types.log("[CUP]: stmt");
		block_node p = new_node(block_node.class);
		p.add_stmt((syntree_node)e);
		RESULT = p;
	:}
	;
  
stmt ::=
	while_stmt:e
	{:
		types.log("[CUP]: while_stmt");
		RESULT = e;
	:}
	|
	if_stmt:e
	{:
		types.log("[CUP]: if_stmt");
		RESULT = e;
	:}
	|
	return_stmt:e
	{:
		types.log("[CUP]: return_stmt");
		RESULT = e;
	:}
	|
	assign_stmt:e
	{:
		types.log("[CUP]: assign_stmt");
		RESULT = e;
	:}
	|
	multi_assign_stmt:e
	{:
		types.log("[CUP]: multi_assign_stmt");
		RESULT = e;
	:}
	|
	break:e
	{:
		types.log("[CUP]: break");
		RESULT = e;
	:}
	|
	continue:e
	{:
		types.log("[CUP]: continue");
		RESULT = e;
	:}
	|
	expr:e
	{:
		types.log("[CUP]: expr");
		RESULT = e;
	:}
	|
	math_assign_stmt:e
	{:
		types.log("[CUP]: math_assign_stmt");
		RESULT = e;
	:}
	|
	for_stmt:e
	{:
		types.log("[CUP]: for_stmt");
		RESULT = e;
	:}
	|
	for_loop_stmt:e
	{:
		types.log("[CUP]: for_loop_stmt");
		RESULT = e;
	:}
	|
	fake_call_stmt:e
	{:
		types.log("[CUP]: fake_call_stmt");
		RESULT = e;
	:}
	|
	sleep:e
	{:
		types.log("[CUP]: sleep_stmt");
		RESULT = e;
	:}
	|
	yield:e
	{:
		types.log("[CUP]: yield_stmt");
		RESULT = e;
	:}
	|
	switch_stmt:e
	{:
		types.log("[CUP]: switch_stmt");
		RESULT = e;
	:}
	;

fake_call_stmt ::=
	FAKE function_call:e
	{:
		types.log("[CUP]: FAKE function_call");
		function_call_node p = (function_call_node)e;
		p.m_fakecall = true;
		RESULT = p;
	:}
	;
	
for_stmt ::=
	FOR block:e ARG_SPLITTER cmp:e1 ARG_SPLITTER block:e2 THEN block:e3 END
	{:
		types.log("[CUP]: FOR block ARG_SPLITTER cmp ARG_SPLITTER block THEN block END");
		for_stmt p = new_node(for_stmt.class);
		p.m_cmp = (cmp_stmt)e1;
		p.m_beginblock = (block_node)e;
		p.m_endblock = (block_node)e2;
		p.m_block = (block_node)e3;
		RESULT = p;
	:}
	|
	FOR block:e ARG_SPLITTER cmp:e1 ARG_SPLITTER block:e2 THEN END
	{:
		types.log("[CUP]: FOR block ARG_SPLITTER cmp ARG_SPLITTER block THEN END");
		for_stmt p = new_node(for_stmt.class);
		p.m_cmp = (cmp_stmt)e1;
		p.m_beginblock = (block_node)e;
		p.m_endblock = (block_node)e2;
		p.m_block = null;
		RESULT = p;
	:}
	;

for_loop_stmt ::=
	FOR var:e ASSIGN assign_value:e1 RIGHT_POINTER cmp_value:e2 ARG_SPLITTER expr_value:e3 THEN block:e4 END
	{:
		types.log("[CUP]: FOR var ASSIGN assign_value RIGHT_POINTER cmp_value ARG_SPLITTER expr_value THEN block END");
		for_loop_stmt p = new_node(for_loop_stmt.class);
		p.m_var = (syntree_node)e;
		p.m_begin = (syntree_node)e1;
		p.m_end = (syntree_node)e2;
		p.m_add = (syntree_node)e3;
		p.m_block = (block_node)e4;
		RESULT = p;
	:}
	|
	FOR var:e ASSIGN assign_value:e1 RIGHT_POINTER cmp_value:e2 ARG_SPLITTER expr_value:e3 THEN END
	{:
		types.log("[CUP]: FOR var ASSIGN assign_value RIGHT_POINTER cmp_value ARG_SPLITTER expr_value THEN END");
		for_loop_stmt p = new_node(for_loop_stmt.class);
		p.m_var = (syntree_node)e;
		p.m_begin = (syntree_node)e1;
		p.m_end = (syntree_node)e2;
		p.m_add = (syntree_node)e3;
		p.m_block = null;
		RESULT = p;
	:}
	;
	
while_stmt ::=
	WHILE cmp:e THEN block:e1 END 
	{:
		types.log("[CUP]: WHILE cmp THEN block END ");
		while_stmt p = new_node(while_stmt.class);
		p.m_cmp = (cmp_stmt)e;
		p.m_block = (block_node)e1;
		RESULT = p;
	:}
	|
	WHILE cmp:e THEN END 
	{:
		types.log("[CUP]: WHILE cmp THEN END ");
		while_stmt p = new_node(while_stmt.class);
		p.m_cmp = (cmp_stmt)e;
		p.m_block = null;
		RESULT = p;
	:}
	;
	
if_stmt ::=
	IF cmp:e THEN block:e1 elseif_stmt_list:e2 else_stmt:e3 END
	{:
		types.log("[CUP]: IF cmp THEN block elseif_stmt_list else_stmt END");
		if_stmt p = new_node(if_stmt.class);
		p.m_cmp = (cmp_stmt)e;
		p.m_block = (block_node)e1;
		p.m_elseifs = (elseif_stmt_list)e2;
		p.m_elses = (else_stmt)e3;
		RESULT = p;
	:}
	|
	IF cmp:e THEN elseif_stmt_list:e1 else_stmt:e2 END
	{:
		types.log("[CUP]: IF cmp THEN elseif_stmt_list else_stmt END");
		if_stmt p = new_node(if_stmt.class);
		p.m_cmp = (cmp_stmt)e;
		p.m_block = null;
		p.m_elseifs = (elseif_stmt_list)e1;
		p.m_elses = (else_stmt)e2;
		RESULT = p;
	:}
	;
	
elseif_stmt_list ::=
	/* empty */
	{:
		types.log("[CUP]: empty");
		RESULT = null;
	:}
	| 
	elseif_stmt_list:e elseif_stmt:e1
	{:
		types.log("[CUP]: elseif_stmt_list elseif_stmt");
		elseif_stmt_list p = (elseif_stmt_list)e;
		p.add_stmt((syntree_node)e1);
		RESULT = p;
	:}
	| 
	elseif_stmt:e
	{:
		types.log("[CUP]: elseif_stmt");
		elseif_stmt_list p = new_node(elseif_stmt_list.class);
		p.add_stmt((syntree_node)e);
		RESULT = p;
	:}
	;
	
elseif_stmt ::=
	ELSEIF cmp:e THEN block:e1
	{:
		types.log("[CUP]: ELSEIF cmp THEN block");
		elseif_stmt p = new_node(elseif_stmt.class);
		p.m_cmp = (cmp_stmt)e;
		p.m_block = (syntree_node)e1;
		RESULT = p;
	:}
	|
	ELSEIF cmp:e THEN
	{:
		types.log("[CUP]: ELSEIF cmp THEN");
		elseif_stmt p = new_node(elseif_stmt.class);
		p.m_cmp = (cmp_stmt)e;
		p.m_block = null;
		RESULT = p;
	:}
	;
	
else_stmt ::=
	/*empty*/
	{:
		types.log("[CUP]: empty");
		RESULT = null;
	:}
	|
	ELSE block:e
	{:
		types.log("[CUP]: ELSE block");
		else_stmt p = new_node(else_stmt.class);
		p.m_block = (block_node)e;
		RESULT = p;
	:}
	|
	ELSE
	{:
		types.log("[CUP]: ELSE");
		else_stmt p = new_node(else_stmt.class);
		p.m_block = null;
		RESULT = p;
	:}
	;

cmp ::=
	OPEN_BRACKET cmp:e CLOSE_BRACKET
	{:
		types.log("[CUP]: OPEN_BRACKET cmp CLOSE_BRACKET");
		RESULT = e;
	:}
	|
	cmp:e AND cmp:e1
	{:
		types.log("[CUP]: cmp AND cmp");
		cmp_stmt p = new_node(cmp_stmt.class);
		p.m_cmp = "&&";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	:}
	|
	cmp:e OR cmp:e1
	{:
		types.log("[CUP]: cmp OR cmp");
		cmp_stmt p = new_node(cmp_stmt.class);
		p.m_cmp = "||";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	:}
	|
	cmp_value:e LESS cmp_value:e1
	{:
		types.log("[CUP]: cmp_value LESS cmp_value");
		cmp_stmt p = new_node(cmp_stmt.class);
		p.m_cmp = "<";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	:}
	|
	cmp_value:e MORE cmp_value:e1
	{:
		types.log("[CUP]: cmp_value MORE cmp_value");
		cmp_stmt p = new_node(cmp_stmt.class);
		p.m_cmp = ">";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	:}
	|
	cmp_value:e EQUAL cmp_value:e1
	{:
		types.log("[CUP]: cmp_value EQUAL cmp_value");
		cmp_stmt p = new_node(cmp_stmt.class);
		p.m_cmp = "==";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	:}
	|
	cmp_value:e MORE_OR_EQUAL cmp_value:e1
	{:
		types.log("[CUP]: cmp_value MORE_OR_EQUAL cmp_value");
		cmp_stmt p = new_node(cmp_stmt.class);
		p.m_cmp = ">=";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	:}
	|
	cmp_value:e LESS_OR_EQUAL cmp_value:e1
	{:
		types.log("[CUP]: cmp_value LESS_OR_EQUAL cmp_value");
		cmp_stmt p = new_node(cmp_stmt.class);
		p.m_cmp = "<=";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	:}
	|
	cmp_value:e NOT_EQUAL cmp_value:e1
	{:
		types.log("[CUP]: cmp_value NOT_EQUAL cmp_value");
		cmp_stmt p = new_node(cmp_stmt.class);
		p.m_cmp = "!=";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	:}
	|
	FTRUE
	{:
		types.log("[CUP]: FTRUE");
		cmp_stmt p = new_node(cmp_stmt.class);
		p.m_cmp = "true";
		p.m_left = null;
		p.m_right = null;
		RESULT = p;
	:}
	|
	FFALSE
	{:
		types.log("[CUP]: FFALSE");
		cmp_stmt p = new_node(cmp_stmt.class);
		p.m_cmp = "false";
		p.m_left = null;
		p.m_right = null;
		RESULT = p;
	:}
	|
	IS cmp_value:e
	{:
		types.log("[CUP]: IS cmp_value");
		cmp_stmt p = new_node(cmp_stmt.class);
		p.m_cmp = "is";
		p.m_left = (syntree_node)e;
		p.m_right = null;
		RESULT = p;
	:}
	|
	NOT cmp_value:e
	{:
		types.log("[CUP]: NOT cmp_value");
		cmp_stmt p = new_node(cmp_stmt.class);
		p.m_cmp = "not";
		p.m_left = (syntree_node)e;
		p.m_right = null;
		RESULT = p;
	:}
	;

cmp_value ::=
	explicit_value:e
	{:
		types.log("[CUP]: explicit_value");
		RESULT = e;
	:}
	|
	variable:e
	{:
		types.log("[CUP]: variable");
		RESULT = e;
	:}
	|
	expr:e
	{:
		types.log("[CUP]: expr");
		RESULT = e;
	:}
	;
	
return_stmt ::=
	RETURN return_value_list:e
	{:
		types.log("[CUP]: RETURN return_value_list");
		return_stmt p = new_node(return_stmt.class);
		p.m_returnlist = (return_value_list_node)e;
		RESULT = p;
	:}
	|
	RETURN
	{:
		types.log("[CUP]: RETURN");
		return_stmt p = new_node(return_stmt.class);
		p.m_returnlist = null;
		RESULT = p;
	:}
	;
 
return_value_list ::=
	return_value_list:e ARG_SPLITTER return_value:e1
	{:
		types.log("[CUP]: return_value_list ARG_SPLITTER return_value");
		return_value_list_node p = (return_value_list_node)e;
		p.add_arg((syntree_node)e1);
		RESULT = p;
	:}
	|
	return_value:e
	{:
		types.log("[CUP]: return_value");
		return_value_list_node p = new_node(return_value_list_node.class);
		p.add_arg((syntree_node)e);
		RESULT = p;
	:}
	;
 
return_value ::=
	explicit_value:e
	{:
		types.log("[CUP]: explicit_value");
		RESULT = e;
	:}
	|
	variable:e
	{:
		types.log("[CUP]: variable");
		RESULT = e;
	:}
	|
	expr:e
	{:
		types.log("[CUP]: expr");
		RESULT = e;
	:}
	;

assign_stmt ::=
	var:e ASSIGN assign_value:e1
	{:
		types.log("[CUP]: var ASSIGN assign_value");
		assign_stmt p = new_node(assign_stmt.class);
		p.m_var = (syntree_node)e;
		p.m_value = (syntree_node)e1;
		p.m_isnew = false;
		RESULT = p;
	:}
	|
	var:e NEW_ASSIGN assign_value:e1
	{:
		types.log("[CUP]: var NEW_ASSIGN assign_value");
		assign_stmt p = new_node(assign_stmt.class);
		p.m_var = (syntree_node)e;
		p.m_value = (syntree_node)e1;
		p.m_isnew = true;
		RESULT = p;
	:}
	;

multi_assign_stmt ::=
	var_list:e ASSIGN function_call:e1
	{:
		types.log("[CUP]: var_list ASSIGN function_call");
		multi_assign_stmt p = new_node(multi_assign_stmt.class);
		p.m_varlist = (var_list_node)e;
		p.m_value = (syntree_node)e1;
		p.m_isnew = false;
		RESULT = p;
	:}
	|
	var_list:e NEW_ASSIGN function_call:e1
	{:
		types.log("[CUP]: var_list NEW_ASSIGN function_call");
		multi_assign_stmt p = new_node(multi_assign_stmt.class);
		p.m_varlist = (var_list_node)e;
		p.m_value = (syntree_node)e1;
		p.m_isnew = true;
		RESULT = p;
	:}
	;
	
var_list ::=
	var_list:e ARG_SPLITTER var:e1
	{:
		types.log("[CUP]: var_list ARG_SPLITTER var");
		var_list_node p = (var_list_node)e;
		p.add_arg((syntree_node)e1);
		RESULT = p;
	:}
	|
	var:e
	{:
		types.log("[CUP]: var");
		var_list_node p = new_node(var_list_node.class);
		p.add_arg((syntree_node)e);
		RESULT = p;
	:}
	;
	
assign_value ::=
	explicit_value:e
	{:
		types.log("[CUP]: explicit_value");
		RESULT = e;
	:}
	|
	variable:e
	{:
		types.log("[CUP]: variable");
		RESULT = e;
	:}
	|
	expr:e
	{:
		types.log("[CUP]: expr");
		RESULT = e;
	:}
	;
	
math_assign_stmt ::=
	variable:e PLUS_ASSIGN assign_value:e1
	{:
		types.log("[CUP]: variable PLUS_ASSIGN assign_value");
		math_assign_stmt p = new_node(math_assign_stmt.class);
		p.m_var = (syntree_node)e;
		p.m_oper = "+=";
		p.m_value = (syntree_node)e1;
		RESULT = p;
	:}
	|
	variable:e MINUS_ASSIGN assign_value:e1
	{:
		types.log("[CUP]: variable MINUS_ASSIGN assign_value");
		math_assign_stmt p = new_node(math_assign_stmt.class);
		p.m_var = (syntree_node)e;
		p.m_oper = "-=";
		p.m_value = (syntree_node)e1;
		RESULT = p;
	:}
	|
	variable:e DIVIDE_ASSIGN assign_value:e1
	{:
		types.log("[CUP]: variable DIVIDE_ASSIGN assign_value");
		math_assign_stmt p = new_node(math_assign_stmt.class);
		p.m_var = (syntree_node)e;
		p.m_oper = "/=";
		p.m_value = (syntree_node)e1;
		RESULT = p;
	:}
	|
	variable:e MULTIPLY_ASSIGN assign_value:e1
	{:
		types.log("[CUP]: variable MULTIPLY_ASSIGN assign_value");
		math_assign_stmt p = new_node(math_assign_stmt.class);
		p.m_var = (syntree_node)e;
		p.m_oper = "*=";
		p.m_value = (syntree_node)e1;
		RESULT = p;
	:}
	|
	variable:e DIVIDE_MOD_ASSIGN assign_value:e1
	{:
		types.log("[CUP]: variable DIVIDE_MOD_ASSIGN assign_value");
		math_assign_stmt p = new_node(math_assign_stmt.class);
		p.m_var = (syntree_node)e;
		p.m_oper = "%=";
		p.m_value = (syntree_node)e1;
		RESULT = p;
	:}
	|
	variable:e INC
	{:
		types.log("[CUP]: variable INC");
		explicit_value_node pp = new_node(explicit_value_node.class);
		pp.m_str = "1";
		pp.m_type = explicit_value_type.EVT_NUM;
		
		math_assign_stmt p = new_node(math_assign_stmt.class);
		p.m_var = (syntree_node)e;
		p.m_oper = "+=";
		p.m_value = pp;
		RESULT = p;
	:}
	;
	
var ::=
	VAR_BEGIN IDENTIFIER:e
	{:
		types.log("[CUP]: VAR_BEGIN IDENTIFIER");
		var_node p = new_node(var_node.class);
		p.m_str = e.toString();
		RESULT = p;
	:}
	|
	variable:e
	{:
		types.log("[CUP]: variable");
		RESULT = e;
	:}
	;

variable ::=
	IDENTIFIER:e
	{:
		types.log("[CUP]: IDENTIFIER");
		variable_node p = new_node(variable_node.class);
		p.m_str = e.toString();
		RESULT = p;
	:}
	|
	IDENTIFIER:e OPEN_SQUARE_BRACKET expr_value:e1 CLOSE_SQUARE_BRACKET
	{:
		types.log("[CUP]: IDENTIFIER OPEN_SQUARE_BRACKET expr_value CLOSE_SQUARE_BRACKET");
		container_get_node p = new_node(container_get_node.class);
		p.m_container = e.toString();
		p.m_key = (syntree_node)e1;
		RESULT = p;
	:}
	|
	IDENTIFIER_POINTER:e
	{:
		types.log("[CUP]: IDENTIFIER_POINTER");
		struct_pointer_node p = new_node(struct_pointer_node.class);
		p.m_str = e.toString();
		RESULT = p;
	:}
	|
	IDENTIFIER_DOT:e
	{:
		types.log("[CUP]: IDENTIFIER_DOT");
		variable_node p = new_node(variable_node.class);
		p.m_str = e.toString();
		RESULT = p;
	:}
	;

expr ::=
	OPEN_BRACKET expr:e CLOSE_BRACKET
	{:
		types.log("[CUP]: OPEN_BRACKET expr CLOSE_BRACKET");
		RESULT = e;
	:}
	|
	function_call:e
	{:
		types.log("[CUP]: function_call");
		RESULT = e;
	:}
	|
	math_expr:e
	{:
		types.log("[CUP]: math_expr");
		RESULT = e;
	:}
	;

math_expr ::=
	OPEN_BRACKET math_expr:e CLOSE_BRACKET
	{:
		types.log("[CUP]: OPEN_BRACKET math_expr CLOSE_BRACKET");
		RESULT = e;
	:}
	|
	expr_value:e PLUS expr_value:e1
	{:
		types.log("[CUP]: expr_value PLUS expr_value");
		math_expr_node p = new_node(math_expr_node.class);
		p.m_oper = "+";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	:}
	|
	expr_value:e MINUS expr_value:e1
	{:
		types.log("[CUP]: expr_value MINUS expr_value");
		math_expr_node p = new_node(math_expr_node.class);
		p.m_oper = "-";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	:}
	|
	expr_value:e MULTIPLY expr_value:e1
	{:
		types.log("[CUP]: expr_value MULTIPLY expr_value");
		math_expr_node p = new_node(math_expr_node.class);
		p.m_oper = "*";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	:}
	|
	expr_value:e DIVIDE expr_value:e1
	{:
		types.log("[CUP]: expr_value DIVIDE expr_value");
		math_expr_node p = new_node(math_expr_node.class);
		p.m_oper = "/";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	:}
	|
	expr_value:e DIVIDE_MOD expr_value:e1
	{:
		types.log("[CUP]: expr_value DIVIDE_MOD expr_value");
		math_expr_node p = new_node(math_expr_node.class);
		p.m_oper = "%";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	:}
	|
	expr_value:e STRING_CAT expr_value:e1
	{:
		types.log("[CUP]: expr_value STRING_CAT expr_value");
		math_expr_node p = new_node(math_expr_node.class);
		p.m_oper = "..";
		p.m_left = (syntree_node)e;
		p.m_right = (syntree_node)e1;
		RESULT = p;
	:}
	;	

expr_value ::=
	math_expr:e
	{:
		types.log("[CUP]: math_expr");
		RESULT = e;
	:}
	|
	explicit_value:e
	{:
		types.log("[CUP]: explicit_value");
		RESULT = e;
	:}
	|
	function_call:e
	{:
		types.log("[CUP]: function_call");
		RESULT = e;
	:}
	|
	variable:e
	{:
		types.log("[CUP]: variable");
		RESULT = e;
	:}
	;
	
break ::=
	BREAK 
	{:
		types.log("[CUP]: BREAK");
		break_stmt p = new_node(break_stmt.class);
		RESULT = p;
	:}
	;
	
continue ::=
	CONTINUE 
	{:
		types.log("[CUP]: CONTINUE");
		continue_stmt p = new_node(continue_stmt.class);
		RESULT = p;
	:}
	;

sleep ::=
	SLEEP expr_value:e
	{:
		types.log("[CUP]: SLEEP");
		sleep_stmt p = new_node(sleep_stmt.class);
		p.m_time = (syntree_node)e;
		RESULT = p;
	:}
	;
	
yield ::=
	YIELD expr_value:e
	{:
		types.log("[CUP]: YIELD");
		yield_stmt p = new_node(yield_stmt.class);
		p.m_time = (syntree_node)e;
		RESULT = p;
	:}
	;
	
switch_stmt ::=
	SWITCH cmp_value:e switch_case_list:e1 DEFAULT block:e2 END
	{:
		types.log("[CUP]: SWITCH cmp_value switch_case_list DEFAULT block END");
		switch_stmt p = new_node(switch_stmt.class);
		p.m_cmp = (syntree_node)e;
		p.m_caselist = (syntree_node)e1;
		p.m_def = (syntree_node)e2;
		RESULT = p;
	:}
	|
	SWITCH cmp_value:e switch_case_list:e1 DEFAULT END
	{:
		types.log("[CUP]: SWITCH cmp_value switch_case_list DEFAULT END");
		switch_stmt p = new_node(switch_stmt.class);
		p.m_cmp = (syntree_node)e;
		p.m_caselist = (syntree_node)e1;
		p.m_def = null;
		RESULT = p;
	:}
	;
	
switch_case_list ::=
	switch_case_define:e
	{:
		types.log("[CUP]: switch_case_define");
		switch_caselist_node p = new_node(switch_caselist_node.class);
		p.add_case((syntree_node)e);
		RESULT = p;
	:}
	|
	switch_case_list:e switch_case_define:e1
	{:
		types.log("[CUP]: switch_case_list switch_case_define");
		switch_caselist_node p = (switch_caselist_node)e;
		p.add_case((syntree_node)e1);
		RESULT = p;
	:}
	;

switch_case_define ::=
	CASE cmp_value:e THEN block:e1
	{:
		types.log("[CUP]: CASE cmp_value THEN block");
		switch_case_node p = new_node(switch_case_node.class);
		p.m_cmp = (syntree_node)e;
		p.m_block = (syntree_node)e1;
		RESULT = p;
	:}
	|
	CASE cmp_value:e THEN
	{:
		types.log("[CUP]: CASE cmp_value THEN");
		switch_case_node p = new_node(switch_case_node.class);
		p.m_cmp = (syntree_node)e;
		p.m_block = null;
		RESULT = p;
	:}
	;
		
package_head ::=
	/* empty */
	{:
	:}
	|
	PACKAGE IDENTIFIER:e
	{:
		types.log("[CUP]: PACKAGE IDENTIFIER ");
		m_mycup.set_package(e.toString());
	:}
	|
	PACKAGE IDENTIFIER_DOT:e
	{:
		types.log("[CUP]: PACKAGE IDENTIFIER_DOT ");
		m_mycup.set_package(e.toString());
	:}
	;

include_head ::=
	/* empty */
	{:
	:}
	|
	include_define
	|
	include_head include_define
	;
	
include_define ::=
	INCLUDE STRING_DEFINITION:e
	{:
		types.log("[CUP]: INCLUDE STRING_DEFINITION ");
		m_mycup.add_include(e.toString());
	:}
	;

struct_head ::=
	/* empty */
	{:
	:}
	|
	struct_define
	|
	struct_head struct_define
	;

struct_define ::=
	STRUCT IDENTIFIER:e struct_mem_declaration END
	{:
		types.log("[CUP]: STRUCT IDENTIFIER struct_mem_declaration END ");
		m_mycup.add_struct_desc(e.toString());
	:}
	;
	
struct_mem_declaration ::=
	struct_mem_declaration IDENTIFIER:e
	{:
		types.log("[CUP]: struct_mem_declaration IDENTIFIER ");
	:}
	| 
	IDENTIFIER:e
	{:
		types.log("[CUP]: IDENTIFIER ");
	:}
	;

const_head ::=
	/* empty */
	{:
	:}
	|
	const_define
	|
	const_head const_define
	;

const_define ::=
	FCONST IDENTIFIER:e ASSIGN explicit_value:e1
	{:
		types.log("[CUP]: FCONST IDENTIFIER ASSIGN explicit_value ");
		m_mycup.add_const_desc(e.toString(), (syntree_node)e1);
	:}
	;

explicit_value ::=
	FTRUE:e
	{:
		types.log("[CUP]: FTRUE ");
		explicit_value_node p = new_node(explicit_value_node.class);
		p.m_type = explicit_value_type.EVT_TRUE;
		RESULT = p;
	:}
	|
	FFALSE:e
	{:
		types.log("[CUP]: FFALSE ");
		explicit_value_node p = new_node(explicit_value_node.class);
		p.m_type = explicit_value_type.EVT_FALSE;
		RESULT = p;
	:}
	|
	NUMBER:e 
	{:
		types.log("[CUP]: NUMBER ");
		explicit_value_node p = new_node(explicit_value_node.class);
		p.m_str = e.toString();
		p.m_type = explicit_value_type.EVT_NUM;
		RESULT = p;
	:}
	|
	FKUUID:e
	{:
		types.log("[CUP]: FKUUID ");
		explicit_value_node p = new_node(explicit_value_node.class);
		p.m_str = e.toString();
		p.m_type = explicit_value_type.EVT_UUID;
		RESULT = p;
	:}
	|
	STRING_DEFINITION:e 
	{:
		types.log("[CUP]: STRING_DEFINITION ");
		explicit_value_node p = new_node(explicit_value_node.class);
		p.m_str = e.toString();
		p.m_type = explicit_value_type.EVT_STR;
		RESULT = p;
	:}
	|
	FKFLOAT:e
	{:
		types.log("[CUP]: FKFLOAT ");
		explicit_value_node p = new_node(explicit_value_node.class);
		p.m_str = e.toString();
		p.m_type = explicit_value_type.EVT_FLOAT;
		RESULT = p;
	:}
	|
	OPEN_BIG_BRACKET const_map_list_value:e CLOSE_BIG_BRACKET
	{:
		types.log("[CUP]: OPEN_BIG_BRACKET const_map_list_value CLOSE_BIG_BRACKET ");
		explicit_value_node p = new_node(explicit_value_node.class);
		p.m_type = explicit_value_type.EVT_MAP;
		p.m_v = (const_map_list_value_node)e;
		RESULT = p;
	:}
	|
	OPEN_SQUARE_BRACKET const_array_list_value:e CLOSE_SQUARE_BRACKET
	{:
		types.log("[CUP]: OPEN_BIG_BRACKET const_array_list_value CLOSE_BIG_BRACKET ");
		explicit_value_node p = new_node(explicit_value_node.class);
		p.m_type = explicit_value_type.EVT_ARRAY;
		p.m_v = (const_array_list_value_node)e;
		RESULT = p;
	:}
	;
 

const_map_list_value ::=
	/* empty */
	{:
		types.log("[CUP]: empty ");
		const_map_list_value_node p = new_node(const_map_list_value_node.class);
		RESULT = p;
	:}
	|
	const_map_value:e
	{:
		types.log("[CUP]: const_map_value ");
		const_map_list_value_node p = new_node(const_map_list_value_node.class);
		p.add_ele((const_map_value_node)e);
		RESULT = p;
	:}
	|
	const_map_list_value:e const_map_value:e1
	{:
		types.log("[CUP]: const_map_list_value const_map_value ");
		const_map_list_value_node p = (const_map_list_value_node)e;
		p.add_ele((const_map_value_node)e1);
		RESULT = p;
	:}
	;


const_map_value ::=
	explicit_value:e COLON explicit_value:e1
	{:
		types.log("[CUP]: explicit_value COLON explicit_value ");
		const_map_value_node p = new_node(const_map_value_node.class);
		p.m_k = (syntree_node)e;
		p.m_v = (syntree_node)e1;
		RESULT = p;
	:}
	;

const_array_list_value ::=
	/* empty */
	{:
		types.log("[CUP]: empty ");
		const_array_list_value_node p = new_node(const_array_list_value_node.class);
		RESULT = p;
	:}
	|
	explicit_value:e
	{:
		types.log("[CUP]: explicit_value ");
		const_array_list_value_node p = new_node(const_array_list_value_node.class);
		p.add_ele((explicit_value_node)e);
		RESULT = p;
	:}
	|
	const_array_list_value:e explicit_value:e1
	{:
		types.log("[CUP]: const_array_list_value explicit_value ");
		const_array_list_value_node p = (const_array_list_value_node)e;
		p.add_ele((explicit_value_node)e1);
		RESULT = p;
	:}
	;
	